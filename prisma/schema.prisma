// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  courses Course[]
  admin Boolean @default(false)
  professor Boolean @default(false)
  testimonials Testimonials[]
  ratings Ratings[]
  coursesProgress CoursesProgress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id     String @id @default(cuid())
  name String
  price  Int
  imgUrl String?
  users User[]
  testimonials Testimonials[]
  ratings Ratings[]
  coursesProgress CoursesProgress[]
  modules Modules[]
  instructors Instructors[]
  frequentlyAskedQuestions FrequentlyAskedQuestions[]
  courseDescription String @default("")
}

model Modules {
  id            String       @id @default(cuid())
  isVideo       Boolean      @default(false)
  isQuizExam        Boolean      @default(false)
  isContent     Boolean      @default(false)
  order Int
  name String
  moduleVideo  ModuleVideo?
  moduleQuizExam ModuleQuizExam?
  moduleContent ModuleContent?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId String
  course Course @relation(fields: [courseId], references: [id])
}

model ModuleVideo {
  id     String   @id @default(cuid())
  url    String
  title  String
  moduleId String @unique
  module Modules @relation(fields: [moduleId], references: [id])
}

model ModuleQuizExam {
  id        String     @id @default(cuid())
  isExam    Boolean    
  questions Question[]
  moduleId String @unique
  module Modules @relation(fields: [moduleId], references: [id])
  examTime Int

}

model ModuleContent {
  id      String @id @default(cuid())
  title   String
  urlContent String
  moduleId String @unique
  module Modules @relation(fields: [moduleId], references: [id])
}

model Question {
  id               String         @id @default(cuid())
  title            String
  moduleQuizExamId String
  moduleQuizExam   ModuleQuizExam @relation(fields: [moduleQuizExamId], references: [id])
  answers          Answers[]
}

model Answers {
  id         String   @id @default(cuid())
  title      String
  isCorrect  Boolean
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
}

model Testimonials {
  id String @id @default(cuid())
  title String
  content String 
  userId String
  user User @relation(fields: [userId], references: [id])
  courseId String
  course Course @relation(fields: [courseId], references: [id])
}

model FrequentlyAskedQuestions {
  id String @id @default(cuid())
  title String
  response String
  courseId String
  course Course @relation(fields: [courseId], references: [id])
}

model Ratings {
  id String @id @default(cuid())
  rating Float
  userId String
  user User @relation(fields: [userId], references: [id])
  courseId String
  course Course @relation(fields: [courseId], references: [id])
} 

model CoursesProgress {
  id String @id @default(cuid())
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  userId String 
  user User @relation(fields: [userId], references: [id])
  currentModule Int @default(1)
  courseFinished Boolean @default(false)
   
}

model Instructors {
  id String @id @default(cuid())
  name String
  occupation String
  instagram String
  imgUrl String
  courseId String
  course Course @relation(fields: [courseId], references: [id])
}